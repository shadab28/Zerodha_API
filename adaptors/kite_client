import os
from kiteconnect import KiteConnect, KiteTicker

class KiteClient:
    def __init__(self, api_key, api_secret, access_token=None):
        self.kite = KiteConnect(api_key=api_key)
        self.api_key = api_key
        self.api_secret = api_secret
        if access_token:
            self.kite.set_access_token(access_token)
        self._access_token = access_token

    def set_access_token(self, access_token):
        self.kite.set_access_token(access_token)
        self._access_token = access_token

    def quote(self, instruments):
        return self.kite.quote(instruments)

    def historical(self, instrument_token, from_dt, to_dt, interval):
        return self.kite.historical_data(instrument_token, from_dt, to_dt, interval)

    def place_order(self, exchange, tradingsymbol, side, qty, product="MIS", order_type="MARKET"):
        return self.kite.place_order(
            variety=self.kite.VARIETY_REGULAR,
            exchange=exchange,
            tradingsymbol=tradingsymbol,
            transaction_type=self.kite.TRANSACTION_TYPE_BUY if side=="BUY" else self.kite.TRANSACTION_TYPE_SELL,
            quantity=qty,
            product=product,
            order_type=order_type
        )

    def instruments(self, exchange=None):
        return self.kite.instruments(exchange=exchange) if exchange else self.kite.instruments()

    def make_ticker(self):
        if not self._access_token:
            raise RuntimeError("ACCESS_TOKEN missing; set via env or login flow")
        return KiteTicker(self.api_key, self._access_token)
